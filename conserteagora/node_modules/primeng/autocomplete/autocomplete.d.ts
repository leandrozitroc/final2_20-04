import { ElementRef, AfterViewChecked, AfterContentInit, OnDestroy, EventEmitter, QueryList, TemplateRef, Renderer2, ChangeDetectorRef, IterableDiffers } from '@angular/core';
import { AnimationEvent } from '@angular/animations';
import { ControlValueAccessor } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from 'primeng/inputtext';
import * as ɵngcc3 from 'primeng/button';
import * as ɵngcc4 from 'primeng/api';
import * as ɵngcc5 from 'primeng/ripple';
export declare const AUTOCOMPLETE_VALUE_ACCESSOR: any;
export declare class AutoComplete implements AfterViewChecked, AfterContentInit, OnDestroy, ControlValueAccessor {
    el: ElementRef;
    renderer: Renderer2;
    cd: ChangeDetectorRef;
    differs: IterableDiffers;
    minLength: number;
    delay: number;
    style: any;
    panelStyle: any;
    styleClass: string;
    panelStyleClass: string;
    inputStyle: any;
    inputId: string;
    inputStyleClass: string;
    placeholder: string;
    readonly: boolean;
    disabled: boolean;
    maxlength: number;
    name: string;
    required: boolean;
    size: number;
    appendTo: any;
    autoHighlight: boolean;
    forceSelection: boolean;
    type: string;
    autoZIndex: boolean;
    baseZIndex: number;
    ariaLabel: string;
    ariaLabelledBy: string;
    dropdownIcon: string;
    unique: boolean;
    group: boolean;
    completeOnFocus: boolean;
    completeMethod: EventEmitter<any>;
    onSelect: EventEmitter<any>;
    onUnselect: EventEmitter<any>;
    onFocus: EventEmitter<any>;
    onBlur: EventEmitter<any>;
    onDropdownClick: EventEmitter<any>;
    onClear: EventEmitter<any>;
    onKeyUp: EventEmitter<any>;
    onShow: EventEmitter<any>;
    onHide: EventEmitter<any>;
    field: string;
    scrollHeight: string;
    dropdown: boolean;
    dropdownMode: string;
    multiple: boolean;
    tabindex: number;
    dataKey: string;
    emptyMessage: string;
    showTransitionOptions: string;
    hideTransitionOptions: string;
    autofocus: boolean;
    autocomplete: string;
    optionGroupChildren: string;
    optionGroupLabel: string;
    containerEL: ElementRef;
    inputEL: ElementRef;
    multiInputEL: ElementRef;
    multiContainerEL: ElementRef;
    dropdownButton: ElementRef;
    templates: QueryList<any>;
    overlay: HTMLDivElement;
    itemTemplate: TemplateRef<any>;
    selectedItemTemplate: TemplateRef<any>;
    groupTemplate: TemplateRef<any>;
    value: any;
    _suggestions: any[];
    onModelChange: Function;
    onModelTouched: Function;
    timeout: any;
    overlayVisible: boolean;
    documentClickListener: any;
    suggestionsUpdated: boolean;
    highlightOption: any;
    highlightOptionChanged: boolean;
    focus: boolean;
    filled: boolean;
    inputClick: boolean;
    inputKeyDown: boolean;
    noResults: boolean;
    differ: any;
    inputFieldValue: string;
    loading: boolean;
    scrollHandler: any;
    documentResizeListener: any;
    forceSelectionUpdateModelTimeout: any;
    listId: string;
    itemClicked: boolean;
    constructor(el: ElementRef, renderer: Renderer2, cd: ChangeDetectorRef, differs: IterableDiffers);
    get suggestions(): any[];
    set suggestions(val: any[]);
    ngAfterViewChecked(): void;
    handleSuggestionsChange(): void;
    ngAfterContentInit(): void;
    writeValue(value: any): void;
    getOptionGroupChildren(optionGroup: any): any;
    getOptionGroupLabel(optionGroup: any): any;
    registerOnChange(fn: Function): void;
    registerOnTouched(fn: Function): void;
    setDisabledState(val: boolean): void;
    onInput(event: Event): void;
    onInputClick(event: MouseEvent): void;
    search(event: any, query: string): void;
    selectItem(option: any, focus?: boolean): void;
    show(): void;
    onOverlayAnimationStart(event: AnimationEvent): void;
    appendOverlay(): void;
    resolveFieldData(value: any): any;
    restoreOverlayAppend(): void;
    alignOverlay(): void;
    hide(): void;
    handleDropdownClick(event: any): void;
    focusInput(): void;
    removeItem(item: any): void;
    onKeydown(event: any): void;
    onKeyup(event: any): void;
    onInputFocus(event: any): void;
    onInputBlur(event: any): void;
    onInputChange(event: any): void;
    onInputPaste(event: ClipboardEvent): void;
    isSelected(val: any): boolean;
    findOptionIndex(option: any, suggestions: any): number;
    findOptionGroupIndex(val: any, opts: any[]): any;
    updateFilledState(): void;
    updateInputField(): void;
    bindDocumentClickListener(): void;
    isDropdownClick(event: any): boolean;
    unbindDocumentClickListener(): void;
    bindDocumentResizeListener(): void;
    unbindDocumentResizeListener(): void;
    onWindowResize(): void;
    bindScrollListener(): void;
    unbindScrollListener(): void;
    onOverlayHide(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AutoComplete, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<AutoComplete, "p-autoComplete", never, { "minLength": "minLength"; "delay": "delay"; "type": "type"; "autoZIndex": "autoZIndex"; "baseZIndex": "baseZIndex"; "dropdownIcon": "dropdownIcon"; "unique": "unique"; "completeOnFocus": "completeOnFocus"; "scrollHeight": "scrollHeight"; "dropdownMode": "dropdownMode"; "showTransitionOptions": "showTransitionOptions"; "hideTransitionOptions": "hideTransitionOptions"; "autocomplete": "autocomplete"; "suggestions": "suggestions"; "disabled": "disabled"; "style": "style"; "panelStyle": "panelStyle"; "styleClass": "styleClass"; "panelStyleClass": "panelStyleClass"; "inputStyle": "inputStyle"; "inputId": "inputId"; "inputStyleClass": "inputStyleClass"; "placeholder": "placeholder"; "readonly": "readonly"; "maxlength": "maxlength"; "name": "name"; "required": "required"; "size": "size"; "appendTo": "appendTo"; "autoHighlight": "autoHighlight"; "forceSelection": "forceSelection"; "ariaLabel": "ariaLabel"; "ariaLabelledBy": "ariaLabelledBy"; "group": "group"; "field": "field"; "dropdown": "dropdown"; "multiple": "multiple"; "tabindex": "tabindex"; "dataKey": "dataKey"; "emptyMessage": "emptyMessage"; "autofocus": "autofocus"; "optionGroupChildren": "optionGroupChildren"; "optionGroupLabel": "optionGroupLabel"; }, { "completeMethod": "completeMethod"; "onSelect": "onSelect"; "onUnselect": "onUnselect"; "onFocus": "onFocus"; "onBlur": "onBlur"; "onDropdownClick": "onDropdownClick"; "onClear": "onClear"; "onKeyUp": "onKeyUp"; "onShow": "onShow"; "onHide": "onHide"; }, ["templates"], never>;
}
export declare class AutoCompleteModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<AutoCompleteModule, [typeof AutoComplete], [typeof ɵngcc1.CommonModule, typeof ɵngcc2.InputTextModule, typeof ɵngcc3.ButtonModule, typeof ɵngcc4.SharedModule, typeof ɵngcc5.RippleModule], [typeof AutoComplete, typeof ɵngcc4.SharedModule]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<AutoCompleteModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0b2NvbXBsZXRlLmQudHMiLCJzb3VyY2VzIjpbImF1dG9jb21wbGV0ZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7Ozs7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBBZnRlclZpZXdDaGVja2VkLCBBZnRlckNvbnRlbnRJbml0LCBPbkRlc3Ryb3ksIEV2ZW50RW1pdHRlciwgUXVlcnlMaXN0LCBUZW1wbGF0ZVJlZiwgUmVuZGVyZXIyLCBDaGFuZ2VEZXRlY3RvclJlZiwgSXRlcmFibGVEaWZmZXJzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBbmltYXRpb25FdmVudCB9IGZyb20gJ0Bhbmd1bGFyL2FuaW1hdGlvbnMnO1xuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5leHBvcnQgZGVjbGFyZSBjb25zdCBBVVRPQ09NUExFVEVfVkFMVUVfQUNDRVNTT1I6IGFueTtcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEF1dG9Db21wbGV0ZSBpbXBsZW1lbnRzIEFmdGVyVmlld0NoZWNrZWQsIEFmdGVyQ29udGVudEluaXQsIE9uRGVzdHJveSwgQ29udHJvbFZhbHVlQWNjZXNzb3Ige1xuICAgIGVsOiBFbGVtZW50UmVmO1xuICAgIHJlbmRlcmVyOiBSZW5kZXJlcjI7XG4gICAgY2Q6IENoYW5nZURldGVjdG9yUmVmO1xuICAgIGRpZmZlcnM6IEl0ZXJhYmxlRGlmZmVycztcbiAgICBtaW5MZW5ndGg6IG51bWJlcjtcbiAgICBkZWxheTogbnVtYmVyO1xuICAgIHN0eWxlOiBhbnk7XG4gICAgcGFuZWxTdHlsZTogYW55O1xuICAgIHN0eWxlQ2xhc3M6IHN0cmluZztcbiAgICBwYW5lbFN0eWxlQ2xhc3M6IHN0cmluZztcbiAgICBpbnB1dFN0eWxlOiBhbnk7XG4gICAgaW5wdXRJZDogc3RyaW5nO1xuICAgIGlucHV0U3R5bGVDbGFzczogc3RyaW5nO1xuICAgIHBsYWNlaG9sZGVyOiBzdHJpbmc7XG4gICAgcmVhZG9ubHk6IGJvb2xlYW47XG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgbWF4bGVuZ3RoOiBudW1iZXI7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIHJlcXVpcmVkOiBib29sZWFuO1xuICAgIHNpemU6IG51bWJlcjtcbiAgICBhcHBlbmRUbzogYW55O1xuICAgIGF1dG9IaWdobGlnaHQ6IGJvb2xlYW47XG4gICAgZm9yY2VTZWxlY3Rpb246IGJvb2xlYW47XG4gICAgdHlwZTogc3RyaW5nO1xuICAgIGF1dG9aSW5kZXg6IGJvb2xlYW47XG4gICAgYmFzZVpJbmRleDogbnVtYmVyO1xuICAgIGFyaWFMYWJlbDogc3RyaW5nO1xuICAgIGFyaWFMYWJlbGxlZEJ5OiBzdHJpbmc7XG4gICAgZHJvcGRvd25JY29uOiBzdHJpbmc7XG4gICAgdW5pcXVlOiBib29sZWFuO1xuICAgIGdyb3VwOiBib29sZWFuO1xuICAgIGNvbXBsZXRlT25Gb2N1czogYm9vbGVhbjtcbiAgICBjb21wbGV0ZU1ldGhvZDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25TZWxlY3Q6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uVW5zZWxlY3Q6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uRm9jdXM6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uQmx1cjogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25Ecm9wZG93bkNsaWNrOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBvbkNsZWFyOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBvbktleVVwOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBvblNob3c6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uSGlkZTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgZmllbGQ6IHN0cmluZztcbiAgICBzY3JvbGxIZWlnaHQ6IHN0cmluZztcbiAgICBkcm9wZG93bjogYm9vbGVhbjtcbiAgICBkcm9wZG93bk1vZGU6IHN0cmluZztcbiAgICBtdWx0aXBsZTogYm9vbGVhbjtcbiAgICB0YWJpbmRleDogbnVtYmVyO1xuICAgIGRhdGFLZXk6IHN0cmluZztcbiAgICBlbXB0eU1lc3NhZ2U6IHN0cmluZztcbiAgICBzaG93VHJhbnNpdGlvbk9wdGlvbnM6IHN0cmluZztcbiAgICBoaWRlVHJhbnNpdGlvbk9wdGlvbnM6IHN0cmluZztcbiAgICBhdXRvZm9jdXM6IGJvb2xlYW47XG4gICAgYXV0b2NvbXBsZXRlOiBzdHJpbmc7XG4gICAgb3B0aW9uR3JvdXBDaGlsZHJlbjogc3RyaW5nO1xuICAgIG9wdGlvbkdyb3VwTGFiZWw6IHN0cmluZztcbiAgICBjb250YWluZXJFTDogRWxlbWVudFJlZjtcbiAgICBpbnB1dEVMOiBFbGVtZW50UmVmO1xuICAgIG11bHRpSW5wdXRFTDogRWxlbWVudFJlZjtcbiAgICBtdWx0aUNvbnRhaW5lckVMOiBFbGVtZW50UmVmO1xuICAgIGRyb3Bkb3duQnV0dG9uOiBFbGVtZW50UmVmO1xuICAgIHRlbXBsYXRlczogUXVlcnlMaXN0PGFueT47XG4gICAgb3ZlcmxheTogSFRNTERpdkVsZW1lbnQ7XG4gICAgaXRlbVRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIHNlbGVjdGVkSXRlbVRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIGdyb3VwVGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XG4gICAgdmFsdWU6IGFueTtcbiAgICBfc3VnZ2VzdGlvbnM6IGFueVtdO1xuICAgIG9uTW9kZWxDaGFuZ2U6IEZ1bmN0aW9uO1xuICAgIG9uTW9kZWxUb3VjaGVkOiBGdW5jdGlvbjtcbiAgICB0aW1lb3V0OiBhbnk7XG4gICAgb3ZlcmxheVZpc2libGU6IGJvb2xlYW47XG4gICAgZG9jdW1lbnRDbGlja0xpc3RlbmVyOiBhbnk7XG4gICAgc3VnZ2VzdGlvbnNVcGRhdGVkOiBib29sZWFuO1xuICAgIGhpZ2hsaWdodE9wdGlvbjogYW55O1xuICAgIGhpZ2hsaWdodE9wdGlvbkNoYW5nZWQ6IGJvb2xlYW47XG4gICAgZm9jdXM6IGJvb2xlYW47XG4gICAgZmlsbGVkOiBib29sZWFuO1xuICAgIGlucHV0Q2xpY2s6IGJvb2xlYW47XG4gICAgaW5wdXRLZXlEb3duOiBib29sZWFuO1xuICAgIG5vUmVzdWx0czogYm9vbGVhbjtcbiAgICBkaWZmZXI6IGFueTtcbiAgICBpbnB1dEZpZWxkVmFsdWU6IHN0cmluZztcbiAgICBsb2FkaW5nOiBib29sZWFuO1xuICAgIHNjcm9sbEhhbmRsZXI6IGFueTtcbiAgICBkb2N1bWVudFJlc2l6ZUxpc3RlbmVyOiBhbnk7XG4gICAgZm9yY2VTZWxlY3Rpb25VcGRhdGVNb2RlbFRpbWVvdXQ6IGFueTtcbiAgICBsaXN0SWQ6IHN0cmluZztcbiAgICBpdGVtQ2xpY2tlZDogYm9vbGVhbjtcbiAgICBjb25zdHJ1Y3RvcihlbDogRWxlbWVudFJlZiwgcmVuZGVyZXI6IFJlbmRlcmVyMiwgY2Q6IENoYW5nZURldGVjdG9yUmVmLCBkaWZmZXJzOiBJdGVyYWJsZURpZmZlcnMpO1xuICAgIGdldCBzdWdnZXN0aW9ucygpOiBhbnlbXTtcbiAgICBzZXQgc3VnZ2VzdGlvbnModmFsOiBhbnlbXSk7XG4gICAgbmdBZnRlclZpZXdDaGVja2VkKCk6IHZvaWQ7XG4gICAgaGFuZGxlU3VnZ2VzdGlvbnNDaGFuZ2UoKTogdm9pZDtcbiAgICBuZ0FmdGVyQ29udGVudEluaXQoKTogdm9pZDtcbiAgICB3cml0ZVZhbHVlKHZhbHVlOiBhbnkpOiB2b2lkO1xuICAgIGdldE9wdGlvbkdyb3VwQ2hpbGRyZW4ob3B0aW9uR3JvdXA6IGFueSk6IGFueTtcbiAgICBnZXRPcHRpb25Hcm91cExhYmVsKG9wdGlvbkdyb3VwOiBhbnkpOiBhbnk7XG4gICAgcmVnaXN0ZXJPbkNoYW5nZShmbjogRnVuY3Rpb24pOiB2b2lkO1xuICAgIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiBGdW5jdGlvbik6IHZvaWQ7XG4gICAgc2V0RGlzYWJsZWRTdGF0ZSh2YWw6IGJvb2xlYW4pOiB2b2lkO1xuICAgIG9uSW5wdXQoZXZlbnQ6IEV2ZW50KTogdm9pZDtcbiAgICBvbklucHV0Q2xpY2soZXZlbnQ6IE1vdXNlRXZlbnQpOiB2b2lkO1xuICAgIHNlYXJjaChldmVudDogYW55LCBxdWVyeTogc3RyaW5nKTogdm9pZDtcbiAgICBzZWxlY3RJdGVtKG9wdGlvbjogYW55LCBmb2N1cz86IGJvb2xlYW4pOiB2b2lkO1xuICAgIHNob3coKTogdm9pZDtcbiAgICBvbk92ZXJsYXlBbmltYXRpb25TdGFydChldmVudDogQW5pbWF0aW9uRXZlbnQpOiB2b2lkO1xuICAgIGFwcGVuZE92ZXJsYXkoKTogdm9pZDtcbiAgICByZXNvbHZlRmllbGREYXRhKHZhbHVlOiBhbnkpOiBhbnk7XG4gICAgcmVzdG9yZU92ZXJsYXlBcHBlbmQoKTogdm9pZDtcbiAgICBhbGlnbk92ZXJsYXkoKTogdm9pZDtcbiAgICBoaWRlKCk6IHZvaWQ7XG4gICAgaGFuZGxlRHJvcGRvd25DbGljayhldmVudDogYW55KTogdm9pZDtcbiAgICBmb2N1c0lucHV0KCk6IHZvaWQ7XG4gICAgcmVtb3ZlSXRlbShpdGVtOiBhbnkpOiB2b2lkO1xuICAgIG9uS2V5ZG93bihldmVudDogYW55KTogdm9pZDtcbiAgICBvbktleXVwKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIG9uSW5wdXRGb2N1cyhldmVudDogYW55KTogdm9pZDtcbiAgICBvbklucHV0Qmx1cihldmVudDogYW55KTogdm9pZDtcbiAgICBvbklucHV0Q2hhbmdlKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIG9uSW5wdXRQYXN0ZShldmVudDogQ2xpcGJvYXJkRXZlbnQpOiB2b2lkO1xuICAgIGlzU2VsZWN0ZWQodmFsOiBhbnkpOiBib29sZWFuO1xuICAgIGZpbmRPcHRpb25JbmRleChvcHRpb246IGFueSwgc3VnZ2VzdGlvbnM6IGFueSk6IG51bWJlcjtcbiAgICBmaW5kT3B0aW9uR3JvdXBJbmRleCh2YWw6IGFueSwgb3B0czogYW55W10pOiBhbnk7XG4gICAgdXBkYXRlRmlsbGVkU3RhdGUoKTogdm9pZDtcbiAgICB1cGRhdGVJbnB1dEZpZWxkKCk6IHZvaWQ7XG4gICAgYmluZERvY3VtZW50Q2xpY2tMaXN0ZW5lcigpOiB2b2lkO1xuICAgIGlzRHJvcGRvd25DbGljayhldmVudDogYW55KTogYm9vbGVhbjtcbiAgICB1bmJpbmREb2N1bWVudENsaWNrTGlzdGVuZXIoKTogdm9pZDtcbiAgICBiaW5kRG9jdW1lbnRSZXNpemVMaXN0ZW5lcigpOiB2b2lkO1xuICAgIHVuYmluZERvY3VtZW50UmVzaXplTGlzdGVuZXIoKTogdm9pZDtcbiAgICBvbldpbmRvd1Jlc2l6ZSgpOiB2b2lkO1xuICAgIGJpbmRTY3JvbGxMaXN0ZW5lcigpOiB2b2lkO1xuICAgIHVuYmluZFNjcm9sbExpc3RlbmVyKCk6IHZvaWQ7XG4gICAgb25PdmVybGF5SGlkZSgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBBdXRvQ29tcGxldGVNb2R1bGUge1xufVxuIl19