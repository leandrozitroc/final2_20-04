import { TemplateRef, QueryList, ElementRef, EventEmitter, ChangeDetectorRef, OnDestroy, OnInit, AfterContentInit } from '@angular/core';
import { AnimationEvent } from '@angular/animations';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from 'primeng/api';
import * as ɵngcc3 from 'primeng/ripple';
export declare const CASCADESELECT_VALUE_ACCESSOR: any;
export declare class CascadeSelectSub implements OnInit {
    private el;
    selectionPath: any[];
    options: any[];
    optionGroupChildren: any[];
    optionTemplate: TemplateRef<any>;
    level: number;
    optionLabel: string;
    optionValue: string;
    optionGroupLabel: string;
    dirty: boolean;
    root: boolean;
    onSelect: EventEmitter<any>;
    onGroupSelect: EventEmitter<any>;
    get parentActive(): boolean;
    set parentActive(val: boolean);
    activeOption: any;
    _parentActive: boolean;
    constructor(el: ElementRef);
    ngOnInit(): void;
    onOptionClick(event: any, option: any): void;
    onOptionSelect(event: any): void;
    onOptionGroupSelect(event: any): void;
    getOptionLabel(option: any): any;
    getOptionValue(option: any): any;
    getOptionGroupLabel(optionGroup: any): any;
    getOptionGroupChildren(optionGroup: any): any;
    isOptionGroup(option: any): any;
    getOptionLabelToRender(option: any): any;
    getItemClass(option: any): {
        'p-cascadeselect-item': boolean;
        'p-cascadeselect-item-group': any;
        'p-cascadeselect-item-active p-highlight': boolean;
    };
    isOptionActive(option: any): boolean;
    onKeyDown(event: any, option: any, index: any): void;
    position(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CascadeSelectSub, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<CascadeSelectSub, "p-cascadeSelectSub", never, { "level": "level"; "parentActive": "parentActive"; "selectionPath": "selectionPath"; "options": "options"; "optionGroupChildren": "optionGroupChildren"; "optionTemplate": "optionTemplate"; "optionLabel": "optionLabel"; "optionValue": "optionValue"; "optionGroupLabel": "optionGroupLabel"; "dirty": "dirty"; "root": "root"; }, { "onSelect": "onSelect"; "onGroupSelect": "onGroupSelect"; }, never, never>;
}
export declare class CascadeSelect implements OnInit, AfterContentInit, OnDestroy {
    private el;
    private cd;
    styleClass: string;
    style: any;
    options: any[];
    optionLabel: string;
    optionValue: string;
    optionGroupLabel: string;
    optionGroupChildren: string;
    placeholder: string;
    value: string;
    dataKey: string;
    inputId: string;
    tabindex: string;
    ariaLabelledBy: string;
    appendTo: string;
    disabled: boolean;
    rounded: boolean;
    showTransitionOptions: string;
    hideTransitionOptions: string;
    focusInputEl: ElementRef;
    containerEl: ElementRef;
    onChange: EventEmitter<any>;
    onGroupChange: EventEmitter<any>;
    onShow: EventEmitter<any>;
    onHide: EventEmitter<any>;
    onBeforeShow: EventEmitter<any>;
    onBeforeHide: EventEmitter<any>;
    templates: QueryList<any>;
    selectionPath: any;
    focused: boolean;
    filled: boolean;
    overlayVisible: boolean;
    dirty: boolean;
    valueTemplate: TemplateRef<any>;
    optionTemplate: TemplateRef<any>;
    outsideClickListener: any;
    scrollHandler: any;
    resizeListener: any;
    overlayEl: any;
    onModelChange: Function;
    onModelTouched: Function;
    constructor(el: ElementRef, cd: ChangeDetectorRef);
    ngOnInit(): void;
    ngAfterContentInit(): void;
    onOptionSelect(event: any): void;
    onOptionGroupSelect(event: any): void;
    getOptionLabel(option: any): any;
    getOptionValue(option: any): any;
    getOptionGroupChildren(optionGroup: any, level: any): any;
    isOptionGroup(option: any, level: any): any;
    updateSelectionPath(): void;
    updateFilledState(): void;
    findModelOptionInGroup(option: any, level: any): any;
    show(): void;
    hide(): void;
    onClick(event: any): void;
    onFocus(): void;
    onBlur(): void;
    onOverlayAnimationStart(event: AnimationEvent): void;
    onOverlayAnimationDone(event: AnimationEvent): void;
    onOverlayEnter(): void;
    onOverlayLeave(): void;
    writeValue(value: any): void;
    registerOnChange(fn: Function): void;
    registerOnTouched(fn: Function): void;
    setDisabledState(val: boolean): void;
    alignOverlay(): void;
    bindOutsideClickListener(): void;
    unbindOutsideClickListener(): void;
    bindScrollListener(): void;
    unbindScrollListener(): void;
    bindResizeListener(): void;
    unbindResizeListener(): void;
    appendContainer(): void;
    restoreAppend(): void;
    label(): any;
    onKeyDown(event: any): void;
    containerClass(): {
        'p-cascadeselect p-component p-inputwrapper': boolean;
        'p-disabled': boolean;
        'p-focus': boolean;
    };
    labelClass(): {
        'p-cascadeselect-label': boolean;
        'p-placeholder': boolean;
        'p-cascadeselect-label-empty': boolean;
    };
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CascadeSelect, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<CascadeSelect, "p-cascadeSelect", never, { "showTransitionOptions": "showTransitionOptions"; "hideTransitionOptions": "hideTransitionOptions"; "value": "value"; "disabled": "disabled"; "styleClass": "styleClass"; "style": "style"; "options": "options"; "optionLabel": "optionLabel"; "optionValue": "optionValue"; "optionGroupLabel": "optionGroupLabel"; "optionGroupChildren": "optionGroupChildren"; "placeholder": "placeholder"; "dataKey": "dataKey"; "inputId": "inputId"; "tabindex": "tabindex"; "ariaLabelledBy": "ariaLabelledBy"; "appendTo": "appendTo"; "rounded": "rounded"; }, { "onChange": "onChange"; "onGroupChange": "onGroupChange"; "onShow": "onShow"; "onHide": "onHide"; "onBeforeShow": "onBeforeShow"; "onBeforeHide": "onBeforeHide"; }, ["templates"], never>;
}
export declare class CascadeSelectModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<CascadeSelectModule, [typeof CascadeSelect, typeof CascadeSelectSub], [typeof ɵngcc1.CommonModule, typeof ɵngcc2.SharedModule, typeof ɵngcc3.RippleModule], [typeof CascadeSelect, typeof CascadeSelectSub, typeof ɵngcc2.SharedModule]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<CascadeSelectModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FzY2FkZXNlbGVjdC5kLnRzIiwic291cmNlcyI6WyJjYXNjYWRlc2VsZWN0LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7Ozs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUZW1wbGF0ZVJlZiwgUXVlcnlMaXN0LCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIENoYW5nZURldGVjdG9yUmVmLCBPbkRlc3Ryb3ksIE9uSW5pdCwgQWZ0ZXJDb250ZW50SW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQW5pbWF0aW9uRXZlbnQgfSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IENBU0NBREVTRUxFQ1RfVkFMVUVfQUNDRVNTT1I6IGFueTtcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIENhc2NhZGVTZWxlY3RTdWIgaW1wbGVtZW50cyBPbkluaXQge1xuICAgIHByaXZhdGUgZWw7XG4gICAgc2VsZWN0aW9uUGF0aDogYW55W107XG4gICAgb3B0aW9uczogYW55W107XG4gICAgb3B0aW9uR3JvdXBDaGlsZHJlbjogYW55W107XG4gICAgb3B0aW9uVGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XG4gICAgbGV2ZWw6IG51bWJlcjtcbiAgICBvcHRpb25MYWJlbDogc3RyaW5nO1xuICAgIG9wdGlvblZhbHVlOiBzdHJpbmc7XG4gICAgb3B0aW9uR3JvdXBMYWJlbDogc3RyaW5nO1xuICAgIGRpcnR5OiBib29sZWFuO1xuICAgIHJvb3Q6IGJvb2xlYW47XG4gICAgb25TZWxlY3Q6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uR3JvdXBTZWxlY3Q6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGdldCBwYXJlbnRBY3RpdmUoKTogYm9vbGVhbjtcbiAgICBzZXQgcGFyZW50QWN0aXZlKHZhbDogYm9vbGVhbik7XG4gICAgYWN0aXZlT3B0aW9uOiBhbnk7XG4gICAgX3BhcmVudEFjdGl2ZTogYm9vbGVhbjtcbiAgICBjb25zdHJ1Y3RvcihlbDogRWxlbWVudFJlZik7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBvbk9wdGlvbkNsaWNrKGV2ZW50OiBhbnksIG9wdGlvbjogYW55KTogdm9pZDtcbiAgICBvbk9wdGlvblNlbGVjdChldmVudDogYW55KTogdm9pZDtcbiAgICBvbk9wdGlvbkdyb3VwU2VsZWN0KGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIGdldE9wdGlvbkxhYmVsKG9wdGlvbjogYW55KTogYW55O1xuICAgIGdldE9wdGlvblZhbHVlKG9wdGlvbjogYW55KTogYW55O1xuICAgIGdldE9wdGlvbkdyb3VwTGFiZWwob3B0aW9uR3JvdXA6IGFueSk6IGFueTtcbiAgICBnZXRPcHRpb25Hcm91cENoaWxkcmVuKG9wdGlvbkdyb3VwOiBhbnkpOiBhbnk7XG4gICAgaXNPcHRpb25Hcm91cChvcHRpb246IGFueSk6IGFueTtcbiAgICBnZXRPcHRpb25MYWJlbFRvUmVuZGVyKG9wdGlvbjogYW55KTogYW55O1xuICAgIGdldEl0ZW1DbGFzcyhvcHRpb246IGFueSk6IHtcbiAgICAgICAgJ3AtY2FzY2FkZXNlbGVjdC1pdGVtJzogYm9vbGVhbjtcbiAgICAgICAgJ3AtY2FzY2FkZXNlbGVjdC1pdGVtLWdyb3VwJzogYW55O1xuICAgICAgICAncC1jYXNjYWRlc2VsZWN0LWl0ZW0tYWN0aXZlIHAtaGlnaGxpZ2h0JzogYm9vbGVhbjtcbiAgICB9O1xuICAgIGlzT3B0aW9uQWN0aXZlKG9wdGlvbjogYW55KTogYm9vbGVhbjtcbiAgICBvbktleURvd24oZXZlbnQ6IGFueSwgb3B0aW9uOiBhbnksIGluZGV4OiBhbnkpOiB2b2lkO1xuICAgIHBvc2l0aW9uKCk6IHZvaWQ7XG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBDYXNjYWRlU2VsZWN0IGltcGxlbWVudHMgT25Jbml0LCBBZnRlckNvbnRlbnRJbml0LCBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgZWw7XG4gICAgcHJpdmF0ZSBjZDtcbiAgICBzdHlsZUNsYXNzOiBzdHJpbmc7XG4gICAgc3R5bGU6IGFueTtcbiAgICBvcHRpb25zOiBhbnlbXTtcbiAgICBvcHRpb25MYWJlbDogc3RyaW5nO1xuICAgIG9wdGlvblZhbHVlOiBzdHJpbmc7XG4gICAgb3B0aW9uR3JvdXBMYWJlbDogc3RyaW5nO1xuICAgIG9wdGlvbkdyb3VwQ2hpbGRyZW46IHN0cmluZztcbiAgICBwbGFjZWhvbGRlcjogc3RyaW5nO1xuICAgIHZhbHVlOiBzdHJpbmc7XG4gICAgZGF0YUtleTogc3RyaW5nO1xuICAgIGlucHV0SWQ6IHN0cmluZztcbiAgICB0YWJpbmRleDogc3RyaW5nO1xuICAgIGFyaWFMYWJlbGxlZEJ5OiBzdHJpbmc7XG4gICAgYXBwZW5kVG86IHN0cmluZztcbiAgICBkaXNhYmxlZDogYm9vbGVhbjtcbiAgICByb3VuZGVkOiBib29sZWFuO1xuICAgIHNob3dUcmFuc2l0aW9uT3B0aW9uczogc3RyaW5nO1xuICAgIGhpZGVUcmFuc2l0aW9uT3B0aW9uczogc3RyaW5nO1xuICAgIGZvY3VzSW5wdXRFbDogRWxlbWVudFJlZjtcbiAgICBjb250YWluZXJFbDogRWxlbWVudFJlZjtcbiAgICBvbkNoYW5nZTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25Hcm91cENoYW5nZTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25TaG93OiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBvbkhpZGU6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uQmVmb3JlU2hvdzogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25CZWZvcmVIaWRlOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICB0ZW1wbGF0ZXM6IFF1ZXJ5TGlzdDxhbnk+O1xuICAgIHNlbGVjdGlvblBhdGg6IGFueTtcbiAgICBmb2N1c2VkOiBib29sZWFuO1xuICAgIGZpbGxlZDogYm9vbGVhbjtcbiAgICBvdmVybGF5VmlzaWJsZTogYm9vbGVhbjtcbiAgICBkaXJ0eTogYm9vbGVhbjtcbiAgICB2YWx1ZVRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIG9wdGlvblRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIG91dHNpZGVDbGlja0xpc3RlbmVyOiBhbnk7XG4gICAgc2Nyb2xsSGFuZGxlcjogYW55O1xuICAgIHJlc2l6ZUxpc3RlbmVyOiBhbnk7XG4gICAgb3ZlcmxheUVsOiBhbnk7XG4gICAgb25Nb2RlbENoYW5nZTogRnVuY3Rpb247XG4gICAgb25Nb2RlbFRvdWNoZWQ6IEZ1bmN0aW9uO1xuICAgIGNvbnN0cnVjdG9yKGVsOiBFbGVtZW50UmVmLCBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYpO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQ7XG4gICAgb25PcHRpb25TZWxlY3QoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgb25PcHRpb25Hcm91cFNlbGVjdChldmVudDogYW55KTogdm9pZDtcbiAgICBnZXRPcHRpb25MYWJlbChvcHRpb246IGFueSk6IGFueTtcbiAgICBnZXRPcHRpb25WYWx1ZShvcHRpb246IGFueSk6IGFueTtcbiAgICBnZXRPcHRpb25Hcm91cENoaWxkcmVuKG9wdGlvbkdyb3VwOiBhbnksIGxldmVsOiBhbnkpOiBhbnk7XG4gICAgaXNPcHRpb25Hcm91cChvcHRpb246IGFueSwgbGV2ZWw6IGFueSk6IGFueTtcbiAgICB1cGRhdGVTZWxlY3Rpb25QYXRoKCk6IHZvaWQ7XG4gICAgdXBkYXRlRmlsbGVkU3RhdGUoKTogdm9pZDtcbiAgICBmaW5kTW9kZWxPcHRpb25Jbkdyb3VwKG9wdGlvbjogYW55LCBsZXZlbDogYW55KTogYW55O1xuICAgIHNob3coKTogdm9pZDtcbiAgICBoaWRlKCk6IHZvaWQ7XG4gICAgb25DbGljayhldmVudDogYW55KTogdm9pZDtcbiAgICBvbkZvY3VzKCk6IHZvaWQ7XG4gICAgb25CbHVyKCk6IHZvaWQ7XG4gICAgb25PdmVybGF5QW5pbWF0aW9uU3RhcnQoZXZlbnQ6IEFuaW1hdGlvbkV2ZW50KTogdm9pZDtcbiAgICBvbk92ZXJsYXlBbmltYXRpb25Eb25lKGV2ZW50OiBBbmltYXRpb25FdmVudCk6IHZvaWQ7XG4gICAgb25PdmVybGF5RW50ZXIoKTogdm9pZDtcbiAgICBvbk92ZXJsYXlMZWF2ZSgpOiB2b2lkO1xuICAgIHdyaXRlVmFsdWUodmFsdWU6IGFueSk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPbkNoYW5nZShmbjogRnVuY3Rpb24pOiB2b2lkO1xuICAgIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiBGdW5jdGlvbik6IHZvaWQ7XG4gICAgc2V0RGlzYWJsZWRTdGF0ZSh2YWw6IGJvb2xlYW4pOiB2b2lkO1xuICAgIGFsaWduT3ZlcmxheSgpOiB2b2lkO1xuICAgIGJpbmRPdXRzaWRlQ2xpY2tMaXN0ZW5lcigpOiB2b2lkO1xuICAgIHVuYmluZE91dHNpZGVDbGlja0xpc3RlbmVyKCk6IHZvaWQ7XG4gICAgYmluZFNjcm9sbExpc3RlbmVyKCk6IHZvaWQ7XG4gICAgdW5iaW5kU2Nyb2xsTGlzdGVuZXIoKTogdm9pZDtcbiAgICBiaW5kUmVzaXplTGlzdGVuZXIoKTogdm9pZDtcbiAgICB1bmJpbmRSZXNpemVMaXN0ZW5lcigpOiB2b2lkO1xuICAgIGFwcGVuZENvbnRhaW5lcigpOiB2b2lkO1xuICAgIHJlc3RvcmVBcHBlbmQoKTogdm9pZDtcbiAgICBsYWJlbCgpOiBhbnk7XG4gICAgb25LZXlEb3duKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIGNvbnRhaW5lckNsYXNzKCk6IHtcbiAgICAgICAgJ3AtY2FzY2FkZXNlbGVjdCBwLWNvbXBvbmVudCBwLWlucHV0d3JhcHBlcic6IGJvb2xlYW47XG4gICAgICAgICdwLWRpc2FibGVkJzogYm9vbGVhbjtcbiAgICAgICAgJ3AtZm9jdXMnOiBib29sZWFuO1xuICAgIH07XG4gICAgbGFiZWxDbGFzcygpOiB7XG4gICAgICAgICdwLWNhc2NhZGVzZWxlY3QtbGFiZWwnOiBib29sZWFuO1xuICAgICAgICAncC1wbGFjZWhvbGRlcic6IGJvb2xlYW47XG4gICAgICAgICdwLWNhc2NhZGVzZWxlY3QtbGFiZWwtZW1wdHknOiBib29sZWFuO1xuICAgIH07XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIENhc2NhZGVTZWxlY3RNb2R1bGUge1xufVxuIl19