import { ElementRef, AfterViewInit, OnDestroy, Renderer2, NgZone, EventEmitter, ChangeDetectorRef } from '@angular/core';
import { MenuItem, ContextMenuService } from 'primeng/api';
import { Subject, Subscription } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '@angular/router';
import * as ɵngcc3 from 'primeng/ripple';
export declare class ContextMenuSub {
    item: MenuItem;
    root: boolean;
    parentItemKey: any;
    leafClick: EventEmitter<any>;
    sublistViewChild: ElementRef;
    menuitemViewChild: ElementRef;
    contextMenu: ContextMenu;
    activeItemKey: string;
    hideTimeout: any;
    activeItemKeyChangeSubscription: Subscription;
    constructor(contextMenu: any);
    ngOnInit(): void;
    onItemMouseEnter(event: any, item: any, key: any): void;
    onItemMouseLeave(event: any, item: any): void;
    onItemClick(event: any, item: any, menuitem: any, key: any): void;
    onLeafClick(): void;
    getKey(index: any): string;
    isActive(key: any): boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ContextMenuSub, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ContextMenuSub, "p-contextMenuSub", never, { "item": "item"; "root": "root"; "parentItemKey": "parentItemKey"; }, { "leafClick": "leafClick"; }, never, never>;
}
export declare class ContextMenu implements AfterViewInit, OnDestroy {
    el: ElementRef;
    renderer: Renderer2;
    cd: ChangeDetectorRef;
    zone: NgZone;
    contextMenuService: ContextMenuService;
    model: MenuItem[];
    global: boolean;
    target: any;
    style: any;
    styleClass: string;
    appendTo: any;
    autoZIndex: boolean;
    baseZIndex: number;
    triggerEvent: string;
    onShow: EventEmitter<any>;
    onHide: EventEmitter<any>;
    containerViewChild: ElementRef;
    documentClickListener: any;
    documentKeydownListener: any;
    windowResizeListener: any;
    triggerEventListener: any;
    ngDestroy$: Subject<unknown>;
    constructor(el: ElementRef, renderer: Renderer2, cd: ChangeDetectorRef, zone: NgZone, contextMenuService: ContextMenuService);
    ngAfterViewInit(): void;
    show(event?: MouseEvent): void;
    hide(): void;
    moveOnTop(): void;
    toggle(event?: MouseEvent): void;
    position(event?: MouseEvent): void;
    positionSubmenu(sublist: any): void;
    isItemMatched(menuitem: any): boolean;
    findNextItem(menuitem: any, isRepeated?: any): any;
    findPrevItem(menuitem: any, isRepeated?: any): any;
    getActiveItem(): any;
    clearActiveItem(): void;
    removeActiveFromSubLists(el: any): void;
    removeActiveFromSublist(menuitem: any): void;
    bindGlobalListeners(): void;
    findModelItemFromKey(key: any): any;
    handleItemClick(event: any, item: any, menuitem: any): void;
    unbindGlobalListeners(): void;
    onWindowResize(event: any): void;
    isOutsideClicked(event: Event): boolean;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ContextMenu, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ContextMenu, "p-contextMenu", never, { "autoZIndex": "autoZIndex"; "baseZIndex": "baseZIndex"; "triggerEvent": "triggerEvent"; "model": "model"; "global": "global"; "target": "target"; "style": "style"; "styleClass": "styleClass"; "appendTo": "appendTo"; }, { "onShow": "onShow"; "onHide": "onHide"; }, never, never>;
}
export declare class ContextMenuModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<ContextMenuModule, [typeof ContextMenu, typeof ContextMenuSub], [typeof ɵngcc1.CommonModule, typeof ɵngcc2.RouterModule, typeof ɵngcc3.RippleModule], [typeof ContextMenu, typeof ɵngcc2.RouterModule]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<ContextMenuModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGV4dG1lbnUuZC50cyIsInNvdXJjZXMiOlsiY29udGV4dG1lbnUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7Ozs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSwgUmVuZGVyZXIyLCBOZ1pvbmUsIEV2ZW50RW1pdHRlciwgQ2hhbmdlRGV0ZWN0b3JSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1lbnVJdGVtLCBDb250ZXh0TWVudVNlcnZpY2UgfSBmcm9tICdwcmltZW5nL2FwaSc7XG5pbXBvcnQgeyBTdWJqZWN0LCBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIENvbnRleHRNZW51U3ViIHtcbiAgICBpdGVtOiBNZW51SXRlbTtcbiAgICByb290OiBib29sZWFuO1xuICAgIHBhcmVudEl0ZW1LZXk6IGFueTtcbiAgICBsZWFmQ2xpY2s6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIHN1Ymxpc3RWaWV3Q2hpbGQ6IEVsZW1lbnRSZWY7XG4gICAgbWVudWl0ZW1WaWV3Q2hpbGQ6IEVsZW1lbnRSZWY7XG4gICAgY29udGV4dE1lbnU6IENvbnRleHRNZW51O1xuICAgIGFjdGl2ZUl0ZW1LZXk6IHN0cmluZztcbiAgICBoaWRlVGltZW91dDogYW55O1xuICAgIGFjdGl2ZUl0ZW1LZXlDaGFuZ2VTdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcbiAgICBjb25zdHJ1Y3Rvcihjb250ZXh0TWVudTogYW55KTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG9uSXRlbU1vdXNlRW50ZXIoZXZlbnQ6IGFueSwgaXRlbTogYW55LCBrZXk6IGFueSk6IHZvaWQ7XG4gICAgb25JdGVtTW91c2VMZWF2ZShldmVudDogYW55LCBpdGVtOiBhbnkpOiB2b2lkO1xuICAgIG9uSXRlbUNsaWNrKGV2ZW50OiBhbnksIGl0ZW06IGFueSwgbWVudWl0ZW06IGFueSwga2V5OiBhbnkpOiB2b2lkO1xuICAgIG9uTGVhZkNsaWNrKCk6IHZvaWQ7XG4gICAgZ2V0S2V5KGluZGV4OiBhbnkpOiBzdHJpbmc7XG4gICAgaXNBY3RpdmUoa2V5OiBhbnkpOiBib29sZWFuO1xufVxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQ29udGV4dE1lbnUgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3kge1xuICAgIGVsOiBFbGVtZW50UmVmO1xuICAgIHJlbmRlcmVyOiBSZW5kZXJlcjI7XG4gICAgY2Q6IENoYW5nZURldGVjdG9yUmVmO1xuICAgIHpvbmU6IE5nWm9uZTtcbiAgICBjb250ZXh0TWVudVNlcnZpY2U6IENvbnRleHRNZW51U2VydmljZTtcbiAgICBtb2RlbDogTWVudUl0ZW1bXTtcbiAgICBnbG9iYWw6IGJvb2xlYW47XG4gICAgdGFyZ2V0OiBhbnk7XG4gICAgc3R5bGU6IGFueTtcbiAgICBzdHlsZUNsYXNzOiBzdHJpbmc7XG4gICAgYXBwZW5kVG86IGFueTtcbiAgICBhdXRvWkluZGV4OiBib29sZWFuO1xuICAgIGJhc2VaSW5kZXg6IG51bWJlcjtcbiAgICB0cmlnZ2VyRXZlbnQ6IHN0cmluZztcbiAgICBvblNob3c6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uSGlkZTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgY29udGFpbmVyVmlld0NoaWxkOiBFbGVtZW50UmVmO1xuICAgIGRvY3VtZW50Q2xpY2tMaXN0ZW5lcjogYW55O1xuICAgIGRvY3VtZW50S2V5ZG93bkxpc3RlbmVyOiBhbnk7XG4gICAgd2luZG93UmVzaXplTGlzdGVuZXI6IGFueTtcbiAgICB0cmlnZ2VyRXZlbnRMaXN0ZW5lcjogYW55O1xuICAgIG5nRGVzdHJveSQ6IFN1YmplY3Q8dW5rbm93bj47XG4gICAgY29uc3RydWN0b3IoZWw6IEVsZW1lbnRSZWYsIHJlbmRlcmVyOiBSZW5kZXJlcjIsIGNkOiBDaGFuZ2VEZXRlY3RvclJlZiwgem9uZTogTmdab25lLCBjb250ZXh0TWVudVNlcnZpY2U6IENvbnRleHRNZW51U2VydmljZSk7XG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XG4gICAgc2hvdyhldmVudD86IE1vdXNlRXZlbnQpOiB2b2lkO1xuICAgIGhpZGUoKTogdm9pZDtcbiAgICBtb3ZlT25Ub3AoKTogdm9pZDtcbiAgICB0b2dnbGUoZXZlbnQ/OiBNb3VzZUV2ZW50KTogdm9pZDtcbiAgICBwb3NpdGlvbihldmVudD86IE1vdXNlRXZlbnQpOiB2b2lkO1xuICAgIHBvc2l0aW9uU3VibWVudShzdWJsaXN0OiBhbnkpOiB2b2lkO1xuICAgIGlzSXRlbU1hdGNoZWQobWVudWl0ZW06IGFueSk6IGJvb2xlYW47XG4gICAgZmluZE5leHRJdGVtKG1lbnVpdGVtOiBhbnksIGlzUmVwZWF0ZWQ/OiBhbnkpOiBhbnk7XG4gICAgZmluZFByZXZJdGVtKG1lbnVpdGVtOiBhbnksIGlzUmVwZWF0ZWQ/OiBhbnkpOiBhbnk7XG4gICAgZ2V0QWN0aXZlSXRlbSgpOiBhbnk7XG4gICAgY2xlYXJBY3RpdmVJdGVtKCk6IHZvaWQ7XG4gICAgcmVtb3ZlQWN0aXZlRnJvbVN1Ykxpc3RzKGVsOiBhbnkpOiB2b2lkO1xuICAgIHJlbW92ZUFjdGl2ZUZyb21TdWJsaXN0KG1lbnVpdGVtOiBhbnkpOiB2b2lkO1xuICAgIGJpbmRHbG9iYWxMaXN0ZW5lcnMoKTogdm9pZDtcbiAgICBmaW5kTW9kZWxJdGVtRnJvbUtleShrZXk6IGFueSk6IGFueTtcbiAgICBoYW5kbGVJdGVtQ2xpY2soZXZlbnQ6IGFueSwgaXRlbTogYW55LCBtZW51aXRlbTogYW55KTogdm9pZDtcbiAgICB1bmJpbmRHbG9iYWxMaXN0ZW5lcnMoKTogdm9pZDtcbiAgICBvbldpbmRvd1Jlc2l6ZShldmVudDogYW55KTogdm9pZDtcbiAgICBpc091dHNpZGVDbGlja2VkKGV2ZW50OiBFdmVudCk6IGJvb2xlYW47XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIENvbnRleHRNZW51TW9kdWxlIHtcbn1cbiJdfQ==